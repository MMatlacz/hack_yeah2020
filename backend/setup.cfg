[tool:pytest]
testpaths = tests
norecursedirs = .git .cache tmp* config settings data migrations
addopts =
    -q
    --doctest-modules
    --isort
markers =
    flask_db(transaction=False): Mark the test as using test database.
    The `transaction` argument allows to use real transactions in the test
    (like ``django.test.TransactionTestCase``)


[isort]
line_length = 79
indent = 4
# use Vertical Hanging Indent mode
multi_line_output = 3
# add one line between `import abc` and `from abc import ABC`
lines_between_types = 1
# add a trailing comma to the end of from imports
include_trailing_comma = 1
# split imports to multline, when 2 or more imports in one line
force_grid_wrap = 2
# Flask related settings
known_flask = flask
# add projects module to first party category
known_first_party = apps
# place imports, which section cannot be determined, to third party category
default_section = THIRDPARTY
sections = FUTURE,STDLIB,FLASK,THIRDPARTY,FIRSTPARTY,LOCALFOLDER


[flake8]
format = wemake
show-source = True
statistics = False
doctests = True
enable-extensions = G

# Plugins:
max-complexity = 6
max-line-length = 80
multiline-quotes = '''
allowed-domain-names = data
pytest-fixture-no-parentheses = True

# Excluding some directories:
exclude =
    *.egg
    .eggs
    .git
    .venv
    __pycache__
    data
    temp
    apps/migrations/
    conftest.py

ignore =
    # D100: missing docstring in public module
    D100,
    # D101: missing docstring in public class
    D101,
    # D102: missing docstring in public method
    D102,
    # D103: missing docstring in public function
    D103,
    # D104: missing docstring in public package
    D104,
    # D105: missing docstring in magic method
    D105,
    # D106: missing docstring in public nested class
    D106,
    # D107: missing docstring in __init__
    D107,
    # W503: line break before binary operator
    W503,
    # DAR1##: violations related to docstring's Args section
    DAR1,
    # DAR2##: violations related to docstring's Returns section
    DAR2,
    # DAR3##: violations related to docstring's Yields section
    DAR3,
    # WPS300: found local folder import
    WPS300,
    # WPS305: found `f` string
    WPS305
    # WPS306: found class without a base class: <class>
    WPS306,
    # WPS412: found `__init__.py` module with logic
    WPS412
    # WPS602: found using `@staticmethod`
    WPS602,

per-file-ignores =
    # D103: missing docstring in public function
    # E501: line too long
    # N802: function name 'test_raises_SomeException' should be lowercase
    # N806: variable in function should be lowercase
    # S101: usage of multiple `assert`s detected.
    # WPS116: found consecutive underscores name: pytest__factoryboy__fixture
    # WPS118: found too long name: <name>
    # WPS204: found overused expression: <expresssion>; used n > max_n
    # WPS210: found too many local variables: n > max_n
    # WPS226: found string constant over-use: XXX
    # WPS432: found magic number: XXX
    test_*.py:
        D103,
        E501,
        N802,
        N806,
        S101,
        WPS116,
        WPS118,
        WPS204,
        WPS210,
        WPS226,
        WPS432,
    # F403: 'from module import *' used; unable to detect undefined names
    # F405: 'module_a' may be undefined, or defined from star imports: module_b
    # WPS226: found string constant over-use: ''
    # WPS347: found vague import that may cause confusion: *
    config/settings/*.py: F403, F405, WPS226, WPS347,
    # WPS110: found wrong variable name: handler
    blueprints.py: WPS110,
    # N802: function name 'handle_ExceptionClass' should be lowercase
    exceptions.py: N802,
    # WPS110: Found wrong variable name: value
    */wrappers/response.py: WPS110,

[darglint]
docstring_style = numpy
